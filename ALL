一、SQL Injection
1.判断是否存在注入，注入是字符型还是数字型	1 or 1=1 / 1' or 1=1#
2.猜解SQL查询语句中的字段数	order by
3.确定显示的字段顺序	union select 
4.获取当前数据库	union select database(),user(),version()//1' union select 1,schema_name from information_schema.schemata #
5.获取数据库中的表	1' union select 1,group_concat(table_name) from information_schema.tables where table_schema=database() #
6.获取表中的字段名	1' union select 1,group_concat(column_name) from information_schema.columns where table_name='users' #
7.下载数据	1' union select 1,concat_ws('--',user,password) from users #
	Impossible：
		1.isset()	检测变量是否存在若变量不存在则返回 FALSE 若变量存在且其值为NULL，也返回 FALSE 若变量存在且值不为NULL，则返回 TURE 
		2.$_REQUEST、$_POST、$_GET
		3.is_numeric( )	检测是否为数字
		4.prepare() 准备要执行的语句，和 bindparam() 和 execute() 连用	用来更方便地执行多条除了占位内容不同外  其他内容相同的语句
		5.fetch() 从一个 PDOStatement 对象相关的结果集中获取下一行
		6.PDOStatement::rowCount() 返回受 DELETE、INSERT、 或 UPDATE 语句影响的行数。
		7.PDO 详细网站https://www.cnblogs.com/zhouguowei/p/5212994.html
	Low:
		1.mysqli_query(connection,query,resultmode); 执行某个针对数据库的查询。
		2.die(message)	输出一条消息，并退出当前脚本。
		3.<pre>		<pre></pre>是html标签，意思是按原样输出不做更改。
		4.is_object() 函数用于检测变量是否是一个对象。
		5.mysqli_error(connection);	返回最近调用函数的最后一个错误描述。
		6.mysqli_connect_error(); 函数返回上一次连接错误的错误描述。
		7.concat.ws()函数,有分隔符的字符串连接 select concat_ws(',','11','22','33');//11,22,33
	Medium:
		1.mysqli_real_escape_string(connection,escapestring);转义在 SQL 语句中使用的字符串中的特殊字符。
	High:
		1.Limite LIMIT 子句可以被用于强制 SELECT 语句返回指定的记录数。LIMIT 接受一个或两个数字参数。参数必须是一个整数常量。如果给定两个参数，第一个参数指定第一个返回记录行的偏移量，第二个参数指定返回记录行的最大数目。

二、SQL Injection (Blind)	//基于 布尔(ascii 和 substr)  时间(if 和 sleep)
1.判断是否存在注入，注入是字符型还是数字型
2.猜解当前数据库名 库名长度length(database());二分法猜解数据库名。ascii(substr(databse(),1,1))>97
3.猜解数据库中的表名
					表的数量(select count (table_name) from information_schema.tables where table_schema=database())=1;
					解表名长度length(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1))=1;
					猜解表名ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))>97;
4.猜解表中的字段名 字段数量，长度，值；
5.猜解数据
	Low:
		1.mysqli_num_rows() 函数返回结果集中行的数量。
		2.$_SERVER 是一个包含了诸如头信息(header)、路径(path)、以及脚本位置(script locations)等等信息的数组。这个数组中的项目由 Web 服务器创建。不能保证每个服务器都提供全部项目；//https://www.cnblogs.com/jianmingyuan/p/5900064.html
		3.substr(string,start,length)	返回字符串的一部分。
		4.sleep()  沉睡
		4.if(,,)	if语句
		5.header() PHP返回状态码，由服务器处理
	Medium:
		1.trigger_error(errormsg,errortype); 创建用户自定义的错误消息。当您需要在运行脚本时的某个指定条件下自定义错误消息时，该函数很有用。
	High:
		1.setcookie() 函数用于设置 cookie。PHP 的 $_COOKIE 变量用于取回 cookie 的值。使用 isset() 函数来确认是否已设置了 cookie。当删除 cookie 时，您应当使过期日期变更为过去的时间点。
		2.bindParam — 绑定一个参数到指定的变量名。bind_param("sss", firstname,lastname, $email);
		
三、Brute Force
	Low:
		1.mysqli_fetch_assoc(result);从结果集中取得一行作为关联数组。
	High:
		1.stripslashes(string);去除字符串中的反斜线字符，如果有两个连续的反斜线，只去掉一个
	Impossible：
		1.strtotime(time,now);函数接受表示日期时间的字符串参数，将任何英文文本的日期或时间描述解析为 Unix 时间戳;
四、Command Injection
命令执行漏洞的原理： ：在操作系统中， & 、&& 、| 、 || 都可以作为命令连接符使用，用户通过浏览器提交执行命令，由于服务器端没有对执行函数进行过滤，从而造成可以执行危险命令

PHP的命令执行函数主要有： ：system、exec、passthru、shell_exec与’ '(这个并不是函数，只是代表他可以执行命令)

常用url编码 ：
%20 = 空格
%5c = \
%26 = &
%7c = |

command1 & command2 ：先执行command2后执行command1
command1 && command2 ：先执行command1后执行command2
command1 | command2 ：只执行command2
command1||command2：command1执行失败，再执行command2(若command1执行成功，就不再执行command2)
	Low:
		1.string php_uname ([ string $mode = “a” ] ); 返回运行 PHP 的系统的有关信息;
		2.shell_exec（字符串）;通过外壳执行命令并以字符串形式返回完整的输出;
		3.stristr(string,search,before_search) ：搜索字符串在另一字符串中的第一次出现，返回字符串的剩余部分（从匹配点），如果未找到所搜索的字符串，则返回 FALSE;
	Medium:
		1.array_keys(array,value,strict);返回包含数组中所有键名的一个新数组。
		2.str_replace(find,replace,string,[count]);函数替换字符串中的一些字符（区分大小写）;
	High:
		1.与黑名单的过滤顺序有关。比如，'|  ' 和 '||';
	Impossible：
		1.explode(separator,string,limit) ：把字符串打散为数组;
		
五、CSRF
	Low:
		1.无任何验证，只需点击网址即可更改用户密码。
	Medium:
		1.stripos(string,find,start);查找字符串在另一字符串中第一次出现的位置,不区分大小写;
		2.只验证主机名host时，可以将网页地址更改。
	High:
		1.session token的使用。

六、Insecure CAPTCHA
		1.recaptcha_check_answer($privkey,$remoteip, $challenge,$response);服务器通过调用recaptcha_check_answer函数检查用户输入的正确性。
		2.$POST中的是某个字段。通过修改，来绕过验证码。

七、File Inclusion
服务器包含文件时，不管文件后缀是否是php，都会尝试当做php文件执行，如果文件内容确为php，则会正常执行并返回结果，如果不是，则会原封不动地打印文件内容，所以文件包含漏洞常常会导致任意文件读取与任意命令执行。
		1.本地包含，远程包含；
		2.使用 str_replace 函数进行过滤是很不安全的，因为可以使用双写绕过。例如，我们包含 hthttp://tp://xx 时，str_replace 函数只会过滤一个 http://； 
		3.可以包含: ../	 ./  /  或者 绝对路径 如:?page=D:/phpstudy_pro/WWW/text.txt;
		4.fnmatch(pattern,string,flags);根据指定的模式来匹配文件名或字符串。ps:该函数无法在 Windows 平台上使用。
		5.用file:///+文件的地址，其实就等价于文件的地址;即file:///D:/phpstudy_pro/WWW/text.txt 等价于 
				D:/phpstudy_pro/WWW/text.txt
		6.Impossible级别的代码使用了白名单机制进行防护，简单粗暴，page参数必须为“include.php”、“file1.php”、“file2.php”、“file3.php”之一，彻底杜绝了文件包含漏洞。

八、File Upload
		1.  ".=" 连接两个字符串;
		2.basename(path,suffix);返回路径中的文件名部分。$path = "/testweb/home.php";echo basename($path);	=>"home";
		3.move_uploaded_file(file,newloc);将上传的文件移动到新位置。若成功，则返回 true，否则返回 false。
		4.$FILES  通过 HTTP POST 方式上传到当前脚本的项目的数组;$HTTP_POST_FILES 包含相同的信息，但它不是一个超全局变量。
			$_FILES["file"]["name"] - 上传文件的名称;
			$_FILES["file"]["type"] - 上传文件的类型;
			$_FILES["file"]["size"] - 上传文件的大小，以字节计;
			$_FILES["file"]["tmp_name"] - 存储在服务器的文件的临时副本的名称;
		5.限制文件类型时，可以通过抓包，修改Content-type为对应的类型;
		6.strpos类型:
			strrpos() 查找字符串在另一字符串中最后一次出现的位置（区分大小写）;
			strpos() - 查找字符串在另一字符串中第一次出现的位置（区分大小写）;
			stripos() - 查找字符串在另一字符串中第一次出现的位置（不区分大小写）;
			strripos() - 查找字符串在另一字符串中最后一次出现的位置（不区分大小写）;
		7.array getimagesize ( string $filename [, array &$imageinfo ] );用于获取图像大小及相关信息，成功返回一个数组，失败则返回 FALSE;
		8.在php版本小于5.3.4的服务器中，当Magic_quote_gpc选项为off时，可以在文件名中使用%00截断，所以可以把上传文件命名为xiaoma.php%00.png。
		9.文件合并:copy 1.jpg/b+text.txt/a hack.jpg
		10.uniqid(prefix,more_entropy);基于以微秒计的当前时间，生成一个唯一的 ID。由于基于系统时间，通过该函数生成的 ID 不是最佳的。如需生成绝对唯一的 ID，请使用 md5() 函数;
		11.ini_get ( string $varname );成功时返回配置选项的值。
			register_globals = Off
			post_max_size = 8M
			echo 'register_globals = ' . ini_get('register_globals') . "\n";
			echo 'post_max_size = ' . ini_get('post_max_size') . "\n";
		=>	register_globals = 0
			post_max_size = 8M
		12.sys_get_temp_dir ( void );返回 PHP 储存临时文件的默认目录的路径;
		13.imagecreatefrom( filename );系列函数用于从文件或 URL 载入一幅图像。进行二次渲染，洗掉图片中的恶意代码。失败返回false;
		14.imagejpeg ( image , filename , quality);从image图像以filename为文件名创建一个JPEG图像，可选参数quality，范围从 0（最差质量，文件更小）到 100（最佳质量，文件最大）;
		15.imagedestroy( img );函数销毁图像资源;
		16.getcwd();返回当前工作目录;
		17.rename(oldname,newname,context);重命名文件或目录。成功返回true，失败false;
		18.file_exists(path);检查文件或目录是否存在。成功ture，false;
		19.unlink(filename,context);删除文件;成功ture，false;

九、Weak Session IDs
		1.setcookie(name,value,有效时长,服务器路径,cookie的域名,是否使用https)；向客户端发送一个 HTTP cookie;
		2.sha1();计算字符串的 SHA-1 散列;
		3.mt_rand(min,max);使用 Mersenne Twister 算法生成随机整数;

十、XSS		https://blog.csdn.net/qq_36119192/article/details/82469035
<script>标签:
	<script>alert("hack")</script>   #弹出hack
	<script>alert(document.cookie)</script>      #弹出cookie
	<script src=http://xxx.com/xss.js></script>  #引用外部的xss
svg标签 :
	<svg onload="alert(1)">
<img>标签：
	<img  src=1  οnerrοr=alert("hack")>
	<img  src=1  οnerrοr=alert(document.cookie)>  #弹出cookie
<body>标签：
	<body οnlοad=alert(1)>
	<body οnpageshοw=alert(1)>
style标签：
	<style οnlοad=alert(1)></style>
